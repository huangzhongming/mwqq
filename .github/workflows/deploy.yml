name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements-cpu.txt
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run Python tests
      run: |
        cd backend
        python manage.py test
        
    - name: Run TypeScript type checking
      run: |
        cd frontend
        npm run build
        
    - name: Lint Python code
      run: |
        cd backend
        pip install flake8
        flake8 --max-line-length=120 --exclude=venv,migrations .
        
  build:
    needs: test
    runs-on: ubuntu-latest
    name: Build Docker Images
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest
          
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest
          
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Create backup before deployment
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} '
          cd /opt/mwqq
          ./scripts/backup.sh pre-deployment-${{ steps.version.outputs.VERSION }}
        '
        
    - name: Copy deployment files to server
      run: |
        scp -r scripts/ ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:/opt/mwqq/
        scp docker-compose.prod.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:/opt/mwqq/docker-compose.yml
        scp .env.production ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:/opt/mwqq/.env
        
    - name: Deploy to production server
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} '
          cd /opt/mwqq
          export VERSION=${{ steps.version.outputs.VERSION }}
          export REGISTRY=${{ env.REGISTRY }}
          export REPO_NAME=${{ github.repository }}
          ./scripts/deploy.sh
        '
        
    - name: Run health checks
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} '
          cd /opt/mwqq
          ./scripts/health-check.sh
        '
        
    - name: Rollback on failure
      if: failure()
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} '
          cd /opt/mwqq
          ./scripts/rollback.sh
        '
        
    - name: Clean up old images
      if: success()
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} '
          docker image prune -f
          docker system prune -f
        '
        
  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    name: Send Notification
    
    steps:
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful for version ${{ steps.version.outputs.VERSION }}"
        # Add Slack/Discord webhook notification here if needed
        
    - name: Notify failure  
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed for version ${{ steps.version.outputs.VERSION }}"
        # Add Slack/Discord webhook notification here if needed