name: Test and Validate

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_passport_photo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements-cpu.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements-cpu.txt
        pip install coverage
        
    - name: Run Python tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_passport_photo
      run: |
        cd backend
        coverage run --source='.' manage.py test
        coverage report --show-missing
        coverage xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        
    - name: Lint Python code
      run: |
        cd backend
        pip install flake8 black isort
        flake8 --max-line-length=120 --exclude=venv,migrations .
        black --check --diff .
        isort --check-only --diff .

  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm install
        
    - name: Run TypeScript type checking
      run: |
        cd frontend
        npx tsc --noEmit
        
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint || true # Don't fail on lint warnings for now
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
        
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  docker-build-test:
    runs-on: ubuntu-latest
    name: Test Docker Builds
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: mwqq-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: mwqq-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker Compose
      run: |
        cp docker-compose.yml docker-compose.test.yml
        # Modify compose file to use test images
        sed -i 's|build:|image: mwqq-frontend:test #build:|g' docker-compose.test.yml
        sed -i 's|context: ./frontend||g' docker-compose.test.yml
        sed -i 's|dockerfile: Dockerfile||g' docker-compose.test.yml
        
        # Start services
        docker-compose -f docker-compose.test.yml up -d --no-build
        sleep 30
        
        # Basic health checks
        curl -f http://localhost:80 || exit 1
        
        # Cleanup
        docker-compose -f docker-compose.test.yml down